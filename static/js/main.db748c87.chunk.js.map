{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","btnText","btnColor","toggle","className","to","type","id","onClick","TextForm","useState","text","setText","Style","styles","document","body","style","backgroundColor","color","heading","rows","value","onChange","event","target","itemType","placeholder","toUpperCase","toLowerCase","navigator","clipboard","writeText","split","length","includes","About","class","App","setStyle","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.db748c87.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  const { btnText, btnColor, toggle } = props;\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <div className=\"container-fluid\">\n          <Link className=\"navbar-brand\" to=\"/\">\n            Text Formatter\n          </Link>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                  Home\n                </Link>\n              </li>\n            </ul>\n            \n            <button\n              type=\"button\"\n              className={`btn btn-${btnColor} btn-outline-${btnColor === 'dark' ? 'light' : \"dark\"} btn-sm me-2`}\n              id=\"liveAlertBtn\"\n              onClick={toggle}\n            >\n              {btnText}\n            </button>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\");\n  const Style = props.styles;\n\n  document.body.style.backgroundColor = Style.backgroundColor;\n  document.body.style.color = Style.color;\n\n  function handleOnChange(event) {\n    setText(event.target.value);\n  }\n  function handleOnUpperCaseClick() {\n    setText(text.toUpperCase());\n  }\n  function handleOnLowerCaseClick() {\n    setText(text.toLowerCase());\n  }\n  function handleOnClearClick() {\n    setText(\"\");\n  }\n  function handleOnCopyClick() {\n    if (!text) return;\n    navigator.clipboard.writeText(text);\n  }\n\n\n  return (\n    <>\n      <div className=\"mb-3\">\n        <h1>{props.heading}</h1>\n        <textarea\n          className=\"form-control\"\n          id=\"myBox\"\n          rows=\"8\"\n          value={!text ? \"\" : text}\n          onChange={handleOnChange}\n          itemType=\"password\"\n          placeholder=\"Enter text here\"\n          style={{ color: Style.color, backgroundColor: Style.backgroundColor }}\n        ></textarea>\n        <button\n          className={`btn btn-${Style.btnColor} btn-outline-${Style.btnColor === \"dark\" ? \"light\" : \"dark\"\n            } my-2 mx-1`}\n          onClick={handleOnUpperCaseClick}\n        >\n          Convert to Uppercase\n        </button>\n        <button\n          className={`btn btn-${Style.btnColor} btn-outline-${Style.btnColor === \"dark\" ? \"light\" : \"dark\"\n            } my-2 mx-1`}\n          onClick={handleOnLowerCaseClick}\n        >\n          Convert to Lowercase\n        </button>\n        <button\n          className={`btn btn-${Style.btnColor} btn-outline-${Style.btnColor === \"dark\" ? \"light\" : \"dark\"\n            } my-2 mx-1`}\n          onClick={handleOnClearClick}\n        >\n          Clear\n        </button>\n        <button\n          className={`btn btn-${Style.btnColor} btn-outline-${Style.btnColor === \"dark\" ? \"light\" : \"dark\"\n            } my-2 mx-1`}\n          onClick={handleOnCopyClick}\n        >\n          Copy\n        </button>\n\n      </div>\n\n      <div className=\"container my-3 text-center\" id=\"text-summary\">\n        <h1>Text Summary</h1>\n        <p>\n          {text.split(\" \").length - 1}{\" \"}\n          {[0, 1].includes(text.split(\" \").length - 1) ? \"word\" : \"words\"} and{\" \"}\n          {text.length}{\" \"}\n          {[0, 1].includes(text.length) ? \"character\" : \"characters\"}\n        </p>\n      </div>\n\n      <div className=\"container my-3 text-center\">\n        <h1>Text Preview</h1>\n        <p id=\"text-preview-code-tag\">\n          <code\n            style={{\n              backgroundColor: Style.backgroundColor,\n              color: Style.color,\n            }}\n          >\n            {!text ? \"No Preview available\" : text}\n          </code>\n        </p>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <div className=\"container\">\n            <div class=\"accordion\" id=\"accordionExample\">\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingOne\">\n      <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n        Accordion Item #1\n      </button>\n    </h2>\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingTwo\">\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n        Accordion Item #2\n      </button>\n    </h2>\n    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingThree\">\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n        Accordion Item #3\n      </button>\n    </h2>\n    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n</div>\n        </div>\n    )\n}\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nfunction App() {\n  // By default it should for dark mode\n  const [Style, setStyle] = useState({\n    color: \"white\",\n    backgroundColor: \"#212529\",\n    btnColor: \"dark\",\n    btnText: \"Enable Light Mode\",\n  });\n\n  const ToggleSwitch = () => {\n    switch (Style.color) {\n      case \"white\":\n        setStyle({\n          color: \"black\",\n          backgroundColor: \"white\",\n          btnColor: \"light\",\n          btnText: \"Enable Dark Mode\",\n        });\n        break;\n      case \"black\":\n        setStyle({\n          color: \"white\",\n          backgroundColor: \"#212529\",\n          btnColor: \"dark\",\n          btnText: \"Enable Light Mode\",\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  document.body.style = {\n    backgroundColor: Style.backgroundColor,\n    color: Style.color,\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar\n          btnColor={Style.btnColor}\n          btnText={Style.btnText}\n          toggle={ToggleSwitch}\n        />\n        <Switch>\n          <Route exact path=\"/\">\n            <div className=\"container my-3\">\n              <TextForm styles={Style} />\n            </div>\n          </Route>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}